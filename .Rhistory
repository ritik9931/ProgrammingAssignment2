cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j <- x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
mat <- x$get()
j <- solve(mat,...)
x$setInverse(j)
j
}
75
76
76 98
j <- NULL
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
j <- NULL
set <- function(y){
x <<- y
j <<- NULL
}
get <- function()x
setInverse <- function(inverse) j <<- inverse
getInverse <- function() j
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j <- x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
mat <- x$get()
j <- solve(mat,...)
x$setInverse(j)
j
}
matrix(1:8,2,4))
matrix(1:8,2,4)
f$getinv()
inv()
matrixinv()
f<-makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$setInverse()
f$getInverse()
f$getInv()
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
j <- NULL
set <- function(y){
x <<- y
j <<- NULL
}
get <- function()x
setInverse <- function(inverse) j <<- inverse
getInverse <- function() j
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j <- x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
data<- x$get()
j <- solve(data,...)
x$setInverse(j)
j
}
f<-makeCacheMatrix(matrix(1:8,2,4))
> f$get()
f<-makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$getInverse()
makeCacheMatrix <- function(x = matrix()) {
j <- NULL
set <- function(y){
x <<- y
j <<- NULL
}
get <- function()x
setInverse <- function(inverse) j <<- inverse
getInverse <- function() j
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j <- x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
data<- x$get()
j <- solve(data,...)
x$setInverse(j)
j
}
f<-makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$getInverse()
cacheSolve(f)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
j <- NULL
set <- function(y){
x <<- y
j <<- NULL
}
get <- function()x
setInverse <- function(inverse) j <<- inverse
getInverse <- function() j
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j <- x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
mat <- x$get()
j <- solve(mat,...)
x$setInverse(j)
j
}
f<-makeCacheMatrix(matrix(1:8,2,4))
f$getInverse()
cacheSolve()
cacheSolve()
cacheSolve(f)
f<-makeCacheMatrix(matrix(1:8,2,4))
f$getInverse()
f$get()
f$getInverse()
f$set()
f$setInverse()
f$getInverse(f)
f$getInverse()
x$setInverse(j)
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function()x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() {
inver<-ginv(x)
inver%%x
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setInverse(inv)
inv
}
f<-makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$getInverse()
f$getInv()
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function()x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() {
inver<-ginv(x)
inver%*%x
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat,...)
x$setInverse(inv)
inv
}
f<-makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$inverse()
f$getInv()
cacheSolve(f)
